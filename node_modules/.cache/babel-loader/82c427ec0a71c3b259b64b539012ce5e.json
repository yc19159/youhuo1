{"remainingRequest":"D:\\11.27\\youhuo1\\node_modules\\babel-loader\\lib\\index.js!D:\\11.27\\youhuo1\\src\\utils\\axios.js","dependencies":[{"path":"D:\\11.27\\youhuo1\\src\\utils\\axios.js","mtime":1574221130263},{"path":"D:\\11.27\\youhuo1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\11.27\\youhuo1\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from \"axios\";\nvar AUTH_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0aGlzIGlzIGxpdGVtYWxsIHRva2VuIiwiYXVkIjoiTUlOSUFQUCIsImlzcyI6IkxJVEVNQUxMIiwidXNlcklkIjoyLCJpYXQiOjE1NzEzODM0NTV9.Bd8k6nLAJpUm114pzoFK5Zeekeb59kJKYA-Ja9HkrrU\"; // let AUTH_TOKEN = \"\"\n\naxios.defaults.baseURL = \"http://192.168.0.28:8080/wx\"; // 基路径   \n\naxios.defaults.headers.common['X-Litemall-Token'] = AUTH_TOKEN; // token \n\naxios.defaults.headers.post['Content-Type'] = 'application/json';\nimport { Toast } from \"vant\";\n\nfunction fail(msg) {\n  Toast.clear();\n  Toast({\n    message: msg,\n    //  icon: 'cross',\n    duration: 400\n  });\n}\n\nimport router from \"@/router\"; // 拦截器配置    Interceptors \n// 发送请求之前 添加拦截器  \n\naxios.interceptors.request.use(function (config) {\n  // 发送之前做的事情 \n  // if(localStorage.token){\n  //     AUTH_TOKEN = localStorage.token;\n  //   }\n  config.headers['X-Litemall-Token'] = AUTH_TOKEN; // console.log(config);\n\n  Toast.loading({\n    message: '加载中...',\n    duration: 3000\n  });\n  return config;\n}, function (error) {\n  // 发送失败 做的失败 \n  fail('请求-未知错误');\n  return Promise.reject(error);\n}); // 响应数据 的拦截器 \n\naxios.interceptors.response.use(function (response) {\n  // 成功接收到数据 \n  // console.log(response);\n  setTimeout(function () {\n    Toast.clear(); // Toast({\n    //     message:response.data.errmsg,\n    //     duration:400\n    // });\n\n    if (response.data.code == \"500\") {\n      router.push({\n        name: \"login\",\n        query: {\n          active: 1\n        }\n      });\n    }\n  }, 800);\n  return response;\n}, function (error) {\n  fail('响应-未知错误'); // 无法接收到数据  \n\n  return Promise.reject(error);\n});\nexport default axios;",{"version":3,"sources":["D:/11.27/youhuo1/src/utils/axios.js"],"names":["axios","AUTH_TOKEN","defaults","baseURL","headers","common","post","Toast","fail","msg","clear","message","duration","router","interceptors","request","use","config","loading","error","Promise","reject","response","setTimeout","data","code","push","name","query","active"],"mappings":"AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,UAAU,GAAG,+MAAjB,C,CACA;;AACAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,6BAAzB,C,CAAwD;;AACxDH,KAAK,CAACE,QAAN,CAAeE,OAAf,CAAuBC,MAAvB,CAA8B,kBAA9B,IAAoDJ,UAApD,C,CAAmE;;AACnED,KAAK,CAACE,QAAN,CAAeE,OAAf,CAAuBE,IAAvB,CAA4B,cAA5B,IAA8C,kBAA9C;AAGA,SAAQC,KAAR,QAAoB,MAApB;;AAEA,SAASC,IAAT,CAAcC,GAAd,EAAkB;AACdF,EAAAA,KAAK,CAACG,KAAN;AACAH,EAAAA,KAAK,CAAC;AACFI,IAAAA,OAAO,EAACF,GADN;AAEF;AACAG,IAAAA,QAAQ,EAAC;AAHP,GAAD,CAAL;AAKH;;AAGD,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;AACA;;AACAb,KAAK,CAACc,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAUC,MAAV,EAAkB;AAC7C;AAEA;AACA;AACA;AACAA,EAAAA,MAAM,CAACb,OAAP,CAAe,kBAAf,IAAqCH,UAArC,CAN6C,CAO7C;;AACAM,EAAAA,KAAK,CAACW,OAAN,CAAc;AACVP,IAAAA,OAAO,EAAE,QADC;AAEVC,IAAAA,QAAQ,EAAC;AAFC,GAAd;AAIA,SAAOK,MAAP;AACH,CAbD,EAaG,UAAUE,KAAV,EAAiB;AAChB;AACAX,EAAAA,IAAI,CAAC,SAAD,CAAJ;AACA,SAAOY,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAjBD,E,CAmBA;;AACAnB,KAAK,CAACc,YAAN,CAAmBQ,QAAnB,CAA4BN,GAA5B,CAAgC,UAAUM,QAAV,EAAoB;AAChD;AACA;AACAC,EAAAA,UAAU,CAAC,YAAI;AACXhB,IAAAA,KAAK,CAACG,KAAN,GADW,CAEX;AACA;AACA;AACA;;AACA,QAAGY,QAAQ,CAACE,IAAT,CAAcC,IAAd,IAAoB,KAAvB,EAA6B;AACzBZ,MAAAA,MAAM,CAACa,IAAP,CAAY;AACRC,QAAAA,IAAI,EAAC,OADG;AAERC,QAAAA,KAAK,EAAC;AACFC,UAAAA,MAAM,EAAC;AADL;AAFE,OAAZ;AAMH;AACJ,GAdS,EAcR,GAdQ,CAAV;AAeA,SAAOP,QAAP;AACH,CAnBD,EAmBG,UAAUH,KAAV,EAAiB;AAChBX,EAAAA,IAAI,CAAC,SAAD,CAAJ,CADgB,CAEhB;;AACA,SAAOY,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAvBD;AA2BA,eAAenB,KAAf","sourcesContent":["\r\n\r\nimport axios from \"axios\";\r\n\r\nlet AUTH_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0aGlzIGlzIGxpdGVtYWxsIHRva2VuIiwiYXVkIjoiTUlOSUFQUCIsImlzcyI6IkxJVEVNQUxMIiwidXNlcklkIjoyLCJpYXQiOjE1NzEzODM0NTV9.Bd8k6nLAJpUm114pzoFK5Zeekeb59kJKYA-Ja9HkrrU\";\r\n// let AUTH_TOKEN = \"\"\r\naxios.defaults.baseURL = \"http://192.168.0.28:8080/wx\"; // 基路径   \r\naxios.defaults.headers.common['X-Litemall-Token'] = AUTH_TOKEN;    // token \r\naxios.defaults.headers.post['Content-Type'] = 'application/json';\r\n\r\n\r\nimport {Toast} from \"vant\"; \r\n\r\nfunction fail(msg){\r\n    Toast.clear();\r\n    Toast({\r\n        message:msg,\r\n        //  icon: 'cross',\r\n        duration:400\r\n    });\r\n}\r\n\r\n \r\nimport router from \"@/router\"\r\n\r\n// 拦截器配置    Interceptors \r\n// 发送请求之前 添加拦截器  \r\naxios.interceptors.request.use(function (config) {\r\n    // 发送之前做的事情 \r\n    \r\n    // if(localStorage.token){\r\n    //     AUTH_TOKEN = localStorage.token;\r\n    //   }\r\n    config.headers['X-Litemall-Token'] = AUTH_TOKEN;\r\n    // console.log(config);\r\n    Toast.loading({\r\n        message: '加载中...',\r\n        duration:3000\r\n    });\r\n    return config;\r\n}, function (error) {\r\n    // 发送失败 做的失败 \r\n    fail('请求-未知错误');\r\n    return Promise.reject(error);\r\n});\r\n\r\n// 响应数据 的拦截器 \r\naxios.interceptors.response.use(function (response) {\r\n    // 成功接收到数据 \r\n    // console.log(response);\r\n    setTimeout(()=>{\r\n        Toast.clear();\r\n        // Toast({\r\n        //     message:response.data.errmsg,\r\n        //     duration:400\r\n        // });\r\n        if(response.data.code==\"500\"){\r\n            router.push({\r\n                name:\"login\",\r\n                query:{\r\n                    active:1\r\n                }\r\n            })\r\n        }\r\n    },800)\r\n    return response;\r\n}, function (error) {\r\n    fail('响应-未知错误')\r\n    // 无法接收到数据  \r\n    return Promise.reject(error);\r\n});\r\n\r\n\r\n\r\nexport default axios;"]}]}